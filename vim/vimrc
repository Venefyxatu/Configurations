" Vundle configuration

set nocompatible
filetype off

" Add Vundle to runtimepath
set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin()

Plugin 'VundleVim/Vundle.vim'               " Plugin management
Plugin 'altercation/vim-colors-solarized'   " colorscheme
Plugin 'mileszs/ack.vim'                    " ack-grep: language-aware grep
Plugin 'kien/ctrlp.vim'                     " find files, methods, ...
Plugin 'ivalkeen/vim-ctrlp-tjump'           " ctrl-p extension for fuzzy search
Plugin 'fholgado/minibufexpl.vim'           " buffer explorer bar
Plugin 'scrooloose/nerdtree'                " NERD tree: filesystem browsing
Plugin 'kien/rainbow_parentheses.vim'       " Fancy coloured brackets
Plugin 'vim-scripts/taglist.vim'            " shows tags in a sidebar
Plugin 'tpope/vim-fugitive'                 " git functionality
Plugin 'godlygeek/tabular'                  " aligning text
Plugin 'plasticboy/vim-markdown'            " markdown syntax
Plugin 'vim-scripts/YankRing.vim'           " history of previous yanks and deletes
Plugin 'majutsushi/tagbar'                  " displays tags in the status bar (current method, for example)
Plugin 'tpope/vim-unimpaired'               " fancy complementary pairs of keybindings with brackets
Plugin 'alfredodeza/coveragepy.vim'         " integrate with coverage.py
Plugin 'Vimjas/vim-python-pep8-indent'      " python indentation style
Plugin 'Valloric/YouCompleteMe'             " code completion
Plugin 'nvie/vim-flake8'                    " runs current file through flake8
Plugin 'python-rope/ropevim'                " python refactoring, code assist, ...
Plugin 'w0rp/ale'                           " async linting / fixing
Plugin 'ntpeters/vim-better-whitespace'     " better whitespace highlighting
Plugin 'matthew-brett/vim-rst-sections'     " help making sections in RST documents
Plugin 'nvie/vim-rst-tables'                " help making tables in RST documents
Plugin 'vimwiki/vimwiki'                    " gather knowledge in vim, wiki-style
Plugin 'xolox/vim-misc'                     " vim loading scripts, miscellaneous, dependency of other plugins
Plugin 'mbbill/undotree'                    " undo history, with branching
Plugin 'Yggdroot/indentLine'                " lines to show indentation levels
" Plugin 'xolox/vim-easytags'                 " actual tag generation

call vundle#end()

" End Vundle configuration


filetype plugin indent on


" Solarized
let g:solarized_termtrans=1
syntax enable
set background=dark
colorscheme solarized

set hlsearch
set cursorline
set tw=0
set autoindent
set cindent
set tabstop=4
set shiftwidth=4
set expandtab
set noerrorbells
set number
set nobackup
set hlsearch
let NERDTreeWinSize=46
let NERDTreeIgnore = ['\.pyc$']

let mapleader="\\"

if version >= 703
   map <Leader>n :if &relativenumber <Bar>
               \set norelativenumber <Bar>
               \else <Bar>
               \set relativenumber <Bar>
               \endif <cr>
endif

" Auto-align on pipe in markdown documents
inoremap <silent> <Bar>   <Bar><Esc>:call <SID>align()<CR>a

function! s:align()
  let p = '^\s*|\s.*\s|\s*$'
  if exists(':Tabularize') && getline('.') =~# '^\s*|' && (getline(line('.')-1) =~# p || getline(line('.')+1) =~# p) && &filetype == 'markdown'
    let column = strlen(substitute(getline('.')[0:col('.')],'[^|]','','g'))
    let position = strlen(matchstr(getline('.')[0:col('.')],'.*|\s*\zs.*'))
    Tabularize/|/l1
    normal! 0
    call search(repeat('[^|]*|',column).'\s\{-\}'.repeat('.',position),'ce',line('.'))
  endif
endfunction
" end auto-align on type



set ruler

"Syntastic
let g:syntastic_check_on_wq=0
let g:syntastic_enable_balloons=0
let g:syntastic_always_populate_loc_list=1
let g:syntastic_auto_loc_list=1
let g:syntastic_ignore_files=['.*\.py$']
let g:syntastic_javascript_checkers = ['jsl']
let g:syntastic_css_checkers = ['csslint']

:imap <Esc>Oq 1
:imap <Esc>Or 2
:imap <Esc>Os 3
:imap <Esc>Ot 4
:imap <Esc>Ou 5
:imap <Esc>Ov 6
:imap <Esc>Ow 7
:imap <Esc>Ox 8
:imap <Esc>Oy 9
:imap <Esc>Op 0
:imap <Esc>On .
:imap <Esc>OQ /
:imap <Esc>OR *
:imap <Esc>Ol +
:imap <Esc>OS -

set showmode

highlight ModeMsg guibg=blue guifg=green gui=NONE cterm=NONE term=NONE

au! BufNewFile,BufRead *.gob set filetype=cpp
au! BufNewFile,BufRead *.dbk set filetype=xml
filetype on
set ai
set showmatch

set wildignore=*.o,*.obj,*.class,*~,.bak

"if has('gui')
"        copen 5
"endif

set foldmethod=indent
set foldlevel=0
set foldcolumn=1

let &cdpath=','.expand("$HOME")

noremap <space> <C-f>

iab teh the
iab seperate separate
iab probalem problem

if has("autocmd")
    filetype plugin indent on
endif

set autowrite
set incsearch
set showmatch

set nofoldenable
set foldmethod=indent
set autoread
set backupext=.bak


set grepprg=grep\ -nH\ $*

let g:detectindent_preferred_expandtab = 1
let g:detectindent_preferred_indent = 4

let &guicursor = &guicursor . ",a:blinkon0"

autocmd BufRead,BufNewFile *.py,*.rscript syntax on set ft=python
autocmd BufRead,BufNewFile *.py,*.rscript set ai
autocmd BufRead,BufNewFile *.rscript,*.py,*sh set tabstop=4 expandtab shiftwidth=4
autocmd BufRead,BufNewFile *.lua,*.rb set tabstop=2 expandtab shiftwidth=2
autocmd BufRead,BufNewFile *.rb syntax on set ft=ruby
autocmd BufRead,BufNewFile *.rb set ai
autocmd FileType python set colorcolumn=120

nnoremap <F2> :UndotreeToggle<CR>
nnoremap <F3> :YcmCompleter GoTo<CR>
nnoremap <F4> :let Tlist_Show_One_File=0<CR>

nnoremap <F5> :Coveragepy show<CR>

noremap <silent> <F6> :PyLintToggle<CR>
noremap <silent> <F7> :NERDTreeToggle<CR>
nnoremap <silent> <F8> :TagbarToggle<CR>

noremap <silent> <F9> :MBEToggle<CR>
nnoremap <silent> <F10> :set ft=xml<CR>:%s/\(<[^\/].\{-}>\)/\r\1/g<CR>:%s/\(<\/.\{-}>\)\(<\/\)/>\1\r\2/g<CR>:g/^$/d<CR>vG=<CR>:%s/&#10;/\r/g<CR>
nnoremap <silent> <F11> :YRShow<CR>

nnoremap <buffer> <F12> :call Flake8()<CR>

function GetYRElem(nr)
    :YRGetElem a:nr
endfunction

command -nargs=1 YG call GetYRElem(<f-args>)

let g:ctrlp_map = '<c-f>'
let g:ctrlp_extensions = ['tag', 'buffertag', 'quickfix', 'dir']

if has("persistent_undo")
    set undodir=$HOME/.vim_undo
    set undofile
endif

function! s:ctrlp_tags(ext)
    if !exists('g:ctrlp_builtins')
        run autoload/ctrlp.vim
    end
    call ctrlp#init(ctrlp#{a:ext}#id())
endf

" Then create some mappings:
nnoremap <silent> <leader><space>l :cal <SID>ctrlp_tags('tags')<cr>


let g:flake8_show_in_file=1

let Tlist_Show_One_File=1
let Tlist_WinWidth=55


set statusline=%f\ %h%m%r%w%y\ %{fugitive#statusline()}\ [%{tagbar#currenttag('%s','')}]\ %=%-14.(%l,%c%V%)\ %P
set laststatus=2

cmap w!! w !sudo tee > /dev/null %

let g:rainbow_active = 1
au VimEnter * RainbowParenthesesActivate
au VimEnter * RainbowParenthesesLoadRound
au VimEnter * RainbowParenthesesLoadSquare
au VimEnter * RainbowParenthesesLoadBraces
au VimEnter * RainbowParenthesesLoadChevron

let g:strip_whitelines_at_eof=1
let g:strip_whitespace_on_save = 1
let g:strip_whitespace_confirm = 0

let g:easytags_cmd = '/usr/bin/ctags-exuberant'
let g:easytags_async = 1
let g:easytags_file = './.vimtags'
let g:easytags_autorecurse = 1
let g:easytags_autohighlight = 0
let g:easytags_opts = ['--fields=+1']
let g:easytags_python_enabled = 1

set tags=.vimtags

nnoremap <c-]> :CtrlPtjump<cr>
