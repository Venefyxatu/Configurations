" Vundle configuration

set nocompatible
filetype off

" Add Vundle to runtimepath
set rtp+=~/.vim/bundle/Vundle
call vundle#begin()

Plugin 'VundleVim/Vundle.vim'
Plugin 'altercation/vim-colors-solarized'
Plugin 'mileszs/ack.vim'
Plugin 'kien/ctrlp.vim'
Plugin 'ivalkeen/vim-ctrlp-tjump'
Plugin 'fholgado/minibufexpl.vim'
Plugin 'scrooloose/nerdtree'
Plugin 'kien/rainbow_parentheses.vim'
Plugin 'vim-scripts/taglist.vim'
Plugin 'tpope/vim-fugitive'
Plugin 'hallison/vim-markdown'
Plugin 'vim-scripts/YankRing.vim'
Plugin 'majutsushi/tagbar'
Plugin 'tpope/vim-unimpaired'
Plugin 'alfredodeza/coveragepy.vim'
Plugin 'Vimjas/vim-python-pep8-indent'
Plugin 'Valloric/YouCompleteMe'
Plugin 'nvie/vim-flake8'
Plugin 'python-rope/ropevim'
Plugin 'w0rp/ale'
Plugin 'ntpeters/vim-better-whitespace'
Plugin 'matthew-brett/vim-rst-sections'
Plugin 'nvie/vim-rst-tables'
Plugin 'vimwiki/vimwiki'

call vundle#end()

" End Vundle configuration


filetype plugin indent on


" Solarized
let g:solarized_termtrans=1
syntax enable
set background=dark
colorscheme iceberg

set hlsearch
set cursorline
set tw=0
set autoindent
set cindent
set tabstop=4
set shiftwidth=4
set expandtab
set noerrorbells
set number
set nobackup
set hlsearch
let NERDTreeWinSize=46
let NERDTreeIgnore = ['\.pyc$']

let mapleader="\\"

if version >= 703
   map <Leader>n :if &relativenumber <Bar>
               \set norelativenumber <Bar>
               \else <Bar>
               \set relativenumber <Bar>
               \endif <cr>
endif
set ruler

"Syntastic
let g:syntastic_check_on_wq=0
let g:syntastic_enable_balloons=0
let g:syntastic_always_populate_loc_list=1
let g:syntastic_auto_loc_list=1
let g:syntastic_ignore_files=['.*\.py$']
let g:syntastic_javascript_checkers = ['jsl']
let g:syntastic_css_checkers = ['csslint']

:imap <Esc>Oq 1
:imap <Esc>Or 2
:imap <Esc>Os 3
:imap <Esc>Ot 4
:imap <Esc>Ou 5
:imap <Esc>Ov 6
:imap <Esc>Ow 7
:imap <Esc>Ox 8
:imap <Esc>Oy 9
:imap <Esc>Op 0
:imap <Esc>On .
:imap <Esc>OQ /
:imap <Esc>OR *
:imap <Esc>Ol +
:imap <Esc>OS -

set showmode

highlight ModeMsg guibg=blue guifg=green gui=NONE cterm=NONE term=NONE

au! BufNewFile,BufRead *.gob set filetype=cpp
au! BufNewFile,BufRead *.dbk set filetype=xml
filetype on
set ai
set showmatch

set wildignore=*.o,*.obj,*.class,*~,.bak

"if has('gui')
"        copen 5
"endif

set foldmethod=indent
set foldlevel=0
set foldcolumn=1

let &cdpath=','.expand("$HOME")

noremap <space> <C-f>

iab teh the
iab seperate separate
iab probalem problem

if has("autocmd")
    filetype plugin indent on
endif

set autowrite
set incsearch
set showmatch

set nofoldenable
set foldmethod=indent
set autoread
set backupext=.bak


set grepprg=grep\ -nH\ $*

let g:detectindent_preferred_expandtab = 1
let g:detectindent_preferred_indent = 4

let &guicursor = &guicursor . ",a:blinkon0"

autocmd BufRead,BufNewFile *.py,*.rscript syntax on set ft=python
autocmd BufRead,BufNewFile *.py,*.rscript set ai
autocmd BufRead,BufNewFile *.rscript,*.py,*sh set tabstop=4 expandtab shiftwidth=4
autocmd BufRead,BufNewFile *.lua,*.rb set tabstop=2 expandtab shiftwidth=2
autocmd BufRead,BufNewFile *.rb syntax on set ft=ruby
autocmd BufRead,BufNewFile *.rb set ai
autocmd FileType python set colorcolumn=120

nnoremap <F3> :YcmCompleter GoTo<CR>
nnoremap <F4> :let Tlist_Show_One_File=0<CR>

nnoremap <F5> :Coveragepy show<CR>

noremap <silent> <F6> :PyLintToggle<CR>
noremap <silent> <F7> :NERDTreeToggle<CR>
nnoremap <silent> <F8> :TagbarToggle<CR>

noremap <silent> <F9> :MBEToggle<CR>
nnoremap <silent> <F10> :set ft=xml<CR>:%s/\(<[^\/].\{-}>\)/\r\1/g<CR>:%s/\(<\/.\{-}>\)\(<\/\)/>\1\r\2/g<CR>:g/^$/d<CR>vG=<CR>:%s/&#10;/\r/g<CR>
nnoremap <silent> <F11> :YRShow<CR>

map <buffer> <F12> :call Flake8()<CR>

function GetYRElem(nr)
    :YRGetElem a:nr
endfunction

command -nargs=1 YG call GetYRElem(<f-args>)

let g:ctrlp_map = '<c-f>'


let g:flake8_show_in_file=1

let Tlist_Show_One_File=1
let Tlist_WinWidth=55


set statusline=%f\ %h%m%r%w%y\ %{fugitive#statusline()}\ [%{tagbar#currenttag('%s','')}]\ %=%-14.(%l,%c%V%)\ %P
set laststatus=2

cmap w!! w !sudo tee > /dev/null %

au VimEnter * RainbowParenthesesToggle
au VimEnter * RainbowParenthesesLoadRound
au VimEnter * RainbowParenthesesLoadSquare
au VimEnter * RainbowParenthesesLoadBraces

let g:strip_whitelines_at_eof=1
let g:strip_whitespace_on_save = 1

nnoremap <c-]> :CtrlPtjump<cr>
